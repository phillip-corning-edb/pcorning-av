---
- name: Update postgres directory ownership, again
  file:
    path: "{{ item }}"
    state: directory
    owner: postgres
    group: postgres
    recurse: yes
  loop:
    - /opt/postgres
    - /var/log/postgres
    - /var/run/postgresql

- name: Update postgres install directory permissions
  file:
    path: "{{ item }}"
    state: directory
    mode: '0777'
    recurse: yes
  loop:
    - /usr/lib/x86_64-linux-gnu
    - /usr/lib/postgresql
    - /usr/share/postgresql
    - /usr/include/postgresql
    - /usr/share/locale
    - /usr/share/doc

- name: postgres create src directory
  file:
    path: /opt/postgres/src/postgres
    state: directory
    owner: postgres
    group: postgres
    recurse: yes

- name: create a tmp directory for GIT, to get around ansible GIT bug
  file:
    path: /opt/postgres/src_tmp
    state: directory
    owner: postgres
    group: postgres
    recurse: yes

# POSTGRES
- name: postgres clone repo
  environment:
    TMPDIR: /opt/postgres/src_tmp
  git:
    repo: "https://github.com/postgres/postgres.git"
    dest: "/opt/postgres/src/postgres"
    version: "REL_13_STABLE"
    update: yes
  become: yes
  become_user: postgres

- name: Build/reinstall postgres from source
  block:
    - name: postgres run make (1)
      make:
        chdir: "/opt/postgres/src/postgres"
        params:
          NUM_THREADS: 4
        target: all
  rescue:
    - name: postgres configure
      shell: >
        ./configure
        '--prefix=/usr'
        '--includedir=${prefix}/include'
        '--mandir=${prefix}/share/man'
        '--infodir=${prefix}/share/info'
        '--sysconfdir=/etc'
        '--localstatedir=/var'
        '--libdir=${prefix}/lib/x86_64-linux-gnu'
        '--with-icu'
        '--with-tcl'
        '--with-perl'
        '--with-python'
        '--with-pam'
        '--with-openssl'
        '--with-libxml'
        '--with-libxslt'
        'PYTHON=/usr/bin/python3'
        '--mandir=/usr/share/postgresql/13/man'
        '--docdir=/usr/share/doc/postgresql-doc-13'
        '--sysconfdir=/etc/postgresql-common'
        '--datarootdir=/usr/share/'
        '--datadir=/usr/share/postgresql/13'
        '--bindir=/usr/lib/postgresql/13/bin'
        '--libdir=/usr/lib/x86_64-linux-gnu/'
        '--libexecdir=/usr/lib/postgresql/'
        '--includedir=/usr/include/postgresql/'
        '--with-extra-version= (Ubuntu 13.3-1.pgdg20.04+1)'
        '--enable-nls'
        '--enable-thread-safety'
        '--enable-tap-tests'
        '--enable-debug'
        '--enable-cassert'
        '--config-cache'
        '--enable-dtrace'
        '--disable-rpath'
        '--with-uuid=e2fs'
        '--with-gnu-ld'
        '--with-pgport=5432'
        '--with-system-tzdata=/usr/share/zoneinfo'
        '--with-llvm'
        'LLVM_CONFIG=/usr/bin/llvm-config-9'
        'CLANG=/usr/bin/clang-9'
        '--with-systemd'
        '--with-selinux'
        'MKDIR_P=/bin/mkdir -p'
        'PROVE=/usr/bin/prove'
        'TAR=/bin/tar'
        'XSLTPROC=xsltproc --nonet'
        'CFLAGS=-g -O0 -fno-omit-frame-pointer'
        'LDFLAGS=-Wl,-Bsymbolic-functions -Wl,-z,relro -Wl,-z,now'
        '--with-gssapi'
        '--with-ldap'
        'build_alias=x86_64-linux-gnu'
      args:
        chdir: "/opt/postgres/src/postgres"
  always:
    - name: postgres run make (2)
      make:
        params:
          NUM_THREADS: 4
        chdir: "/opt/postgres/src/postgres/{{ item.subdir }}"
        target: "{{ item.target }}"
      loop:
        - { subdir: '', target: 'all' }
        - { subdir: 'contrib', target: 'all' }
        - { subdir: 'src/test/regress', target: 'all' }
        - { subdir: 'src/test/perl', target: 'all' }
        - { subdir: 'src/test/isolation', target: 'all' }

    - name: postgres install
      make:
        chdir: "/opt/postgres/src/postgres/{{ item.subdir }}"
        target: "{{ item.target }}"
      loop:
        - { subdir: '', target: 'install' }
        - { subdir: 'contrib', target: 'install' }
        - { subdir: 'src/test/regress', target: 'install-tests' }
        - { subdir: 'src/test/perl', target: 'install' }
        - { subdir: 'src/test/isolation', target: 'install' }
  become: yes
  become_user: postgres

# PGLOGICAL
- name: Rebuild/reinstall pglogical
  environment:
    PG_CONFIG: /usr/lib/postgresql/13/bin/pg_config
  block:
    - name: pglogical make (1)
      make:
        chdir: "/opt/postgres/src/pglogical"
        params:
          NUM_THREADS: 4
          CFLAGS: "-O0"
  rescue:
    - name: pglogical clean
      make:
        chdir: "/opt/postgres/src/pglogical"
        target: clean
    - name: pglogical make (2)
      make:
        chdir: "/opt/postgres/src/pglogical"
        params:
          NUM_THREADS: 4
          CFLAGS: "-O0"
  always:
    - name: pglogical install
      make:
        chdir: "/opt/postgres/src/pglogical"
        target: install
  become: yes
  become_user: postgres
  ignore_errors: yes

# BDR
- name: Rebuild/reinstall bdr
  environment:
    PG_CONFIG: /usr/lib/postgresql/13/bin/pg_config
  block:
    - name: bdr make (1)
      make:
        chdir: "/opt/postgres/src/bdr"
        params:
          NUM_THREADS: 4
          CFLAGS: "-O0"
  rescue:
    - name: bdr clean
      make:
        chdir: "/opt/postgres/src/bdr"
        target: clean
    - name: bdr make (2)
      make:
        chdir: "/opt/postgres/src/bdr"
        params:
          NUM_THREADS: 4
          CFLAGS: "-O0"
  always:
    - name: bdr install
      make:
        chdir: "/opt/postgres/src/bdr"
        target: install
  become: yes
  become_user: postgres
  ignore_errors: yes

# RESTART POSTGRES
- include_role: name=postgres/restart
  vars:
    postgres_service_end_state: started

# POSTGRES INSTALL CHECK
- name: postgres run installcheck (creates regression database)
  make:
    chdir: "/opt/postgres/src/postgres"
    target: installcheck
  ignore_errors: yes
  become: yes
  become_user: postgres

# SETUP GITHUB ACCESS AND BRANCHES
- name: Copy user's github SSH key files
  copy:
    src: '{{item}}'
    dest: "/var/lib/postgresql/.ssh"
    owner: postgres
    group: postgres
    mode: 0600
  loop:
    - "~/.ssh/id_ed25519"
    - "~/.ssh/id_ed25519.pub"

- name: Add user's github SSH keys
  authorized_key:
    user: postgres
    state: present
    key: '{{ item }}'
  with_file:
    - "~/.ssh/id_ed25519.pub"

- name: Setup GIT user
  shell: |
    git config --global pull.rebase true
    git config --global user.name "Phillip Corning"
    git config --global user.email "phillip.corning@enterprisedb.com"
    git config --global core.editor vim
  args:
    chdir: "/opt/postgres/src/bdr"
  become: yes
  become_user: postgres

- name: Fix GIT remote branches (messed up if a tag was used in config.yml)
  block:
    - name: Fix bdr GIT remote branches
      shell: |
        git config remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*"
      args:
        chdir: "/opt/postgres/src/bdr"
    - name: Fix pglogical GIT remote branches
      shell: |
        git config remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*"
      args:
        chdir: "/opt/postgres/src/pglogical"
  become: yes
  become_user: postgres


# SIMPLIFY LOGIN
- name: Redirect root login to postgres
  blockinfile:
    path: /root/.bashrc
    create: yes
    block: |
      sudo su - postgres
    state: present
