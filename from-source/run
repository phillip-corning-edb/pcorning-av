#!/bin/bash

# Pass any command line parameter to prevent a full rebuild (only for subsequent runs)
NO_RESET="${1}"


# Custom configuration values (overrides hooks/post-deploy.yml defaults)
TMP_JSON_FILE="tmp_extra_vars.json"
JSON_CONFIG=$(cat <<EOF
{
    "run_extra_vars" : {
        "_COMMENT_": "GENERATED BY RUN SCRIPT",
        "user_info": {
            "_COMMENT_": "Global GIT user configuration values",
            "name": "",
            "email": "",
        },
        "dev_branches": {
            "_COMMENT_": "Development branch(es) to check out",
            "postgres": "",
            "pglogical": "",
            "bdr": "",
        },
        "dev_config": {
            "_COMMENT_": "MISC configuration values",
            "make_num_threads": 4,
            "run_pg_installcheck": 1,
        }
    }
}
EOF
)
echo "${JSON_CONFIG}" > "${TMP_JSON_FILE}"


# Ensure the token is set in the environment
if [[ -z "${TPA_2Q_SUBSCRIPTION_TOKEN}" ]]; then
    echo "Error - TPA_2Q_SUBSCRIPTION_TOKEN - not set";
    exit;
fi

# Use the current user's GIT SSH keys (must exist!)
if [[ ! -f ~/.ssh/id_ed25519 ]]; then
    echo "Error - id_ed25519 - GIT SSH key not found";
    exit;
fi
if [[ ! -f ~/.ssh/id_ed25519.pub ]]; then
    echo "Error - id_ed25519.pub - GIT SSH key not found";
    exit;
fi
eval `ssh-agent`
ssh-add ~/.ssh/id_ed25519

# Ensure tpaexec does not destroy the cluster
export NO_DEPROVISION=1


if [[ -z "${NO_RESET}" ]]; then
    echo "START OVER"
    docker rm -f node1
    docker rm -f node2

    # Provision
    tpaexec provision .
    if [[ $? -ne 0 ]]; then
        echo "Error - tpaexec provision - failed";
        exit;
    fi

    # Deploy
    tpaexec deploy . --extra-vars "@${TMP_JSON_FILE}"
else
    echo "REBUILD EXISTING SOURCE"

    # Deploy  (run hooks/post-deploy.yml only)
    tpaexec deploy . --tags post-deploy --extra-vars "@${TMP_JSON_FILE}"
fi

echo ""
echo "Attach to nodes with vscode or: ssh -F ssh_config code1"
echo ""

exit
